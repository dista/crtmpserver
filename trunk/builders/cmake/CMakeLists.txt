cmake_minimum_required(VERSION 2.6.3)
PROJECT(all)


#sample commit to trigger HUDSON

#detect additional libraries
SET(OpenSSL_FIND_REQUIRED true)
SET(CRYPTO_FIND_REQUIRED true)
INCLUDE(cmake_find_modules/Find_openssl.cmake)

IF(NOT DEFINED NO_USE_DL)
	INCLUDE(cmake_find_modules/Find_dl.cmake)
ENDIF(NOT DEFINED NO_USE_DL)

INCLUDE(cmake_find_modules/pch_support.cmake)
INCLUDE(CMakeDetermineSystem)
INCLUDE(TestBigEndian)

#setup the endianess if not already defined in toolchain file
if(NOT DEFINED NO_ENDIANESS)
	TEST_BIG_ENDIAN(ENDIANESS)
	IF(ENDIANESS)
		ADD_DEFINITIONS(-DBIG_ENDIAN_BYTE_ALIGNED)
	ELSE(ENDIANESS)
		ADD_DEFINITIONS(-DLITTLE_ENDIAN_BYTE_ALIGNED)
	ENDIF(ENDIANESS)
ENDIF(NOT DEFINED NO_ENDIANESS)

#supported protocols
ADD_DEFINITIONS(-DHAS_PROTOCOL_HTTP)
ADD_DEFINITIONS(-DHAS_PROTOCOL_RTMP)
ADD_DEFINITIONS(-DHAS_PROTOCOL_LIVEFLV)
ADD_DEFINITIONS(-DHAS_PROTOCOL_RTP)
ADD_DEFINITIONS(-DHAS_PROTOCOL_TS)
ADD_DEFINITIONS(-DHAS_PROTOCOL_VAR)
ADD_DEFINITIONS(-DHAS_LUA)
ADD_DEFINITIONS(-DHAS_MEDIA_MP3)
ADD_DEFINITIONS(-DHAS_MEDIA_MP4)
ADD_DEFINITIONS(-DHAS_MEDIA_FLV)

#memory pool
#ADD_DEFINITIONS(-DUSE_MEM_POOL)
#ADD_DEFINITIONS(-DDEBUG_MEM_POOL)

MESSAGE(STATUS "We have a ${CMAKE_SYSTEM} system")
IF(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
	SET(GENERIC_FLAGS "${GENERIC_FLAGS} -fPIC")
	ADD_DEFINITIONS(-DFREEBSD)
	IF(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-D${SOCKREACTOR})
	ELSE(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-DNET_KQUEUE)
	ENDIF(DEFINED SOCKREACTOR)
	INCLUDE(cmake_find_modules/Find_execinfo.cmake)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Darwin")
	SET(GENERIC_FLAGS "${GENERIC_FLAGS} -mmacosx-version-min=10.5")
	ADD_DEFINITIONS(-DOSX)
	IF(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-D${SOCKREACTOR})
	ELSE(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-DNET_KQUEUE)
	ENDIF(DEFINED SOCKREACTOR)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Linux")
	SET(GENERIC_FLAGS "${GENERIC_FLAGS} -fPIC")
	ADD_DEFINITIONS(-DLINUX)
	IF(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-D${SOCKREACTOR})
	ELSE(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-DNET_EPOLL)
	ENDIF(DEFINED SOCKREACTOR)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "SunOS")
	SET(GENERIC_FLAGS "${GENERIC_FLAGS} -fPIC")
	ADD_DEFINITIONS(-DSOLARIS)
	ADD_DEFINITIONS(-DDONT_DEFINE_HTONLL)
	ADD_DEFINITIONS(-DNET_SELECT)
ELSE(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
	MESSAGE(FATAL_ERROR "Platform ${CMAKE_SYSTEM_NAME} not supported yet")
ENDIF(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")

IF (CMAKE_SYSTEM_NAME MATCHES "Darwin" OR CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
	IF (SCONS_FOUND)
		IF (NOT EXISTS ../../3rdparty/v8/libv8.a AND NOT EXISTS ../../3rdparty/v8/libv8_g.a)
			IF(CMAKE_SIZEOF_VOID_P MATCHES "8")
				EXECUTE_PROCESS(COMMAND ${SCONS_BIN_PATH}/scons library=static snapshot=on mode=release verbose=on arch=x64 WORKING_DIRECTORY ../../3rdparty/v8)
			ELSE(CMAKE_SIZEOF_VOID_P MATCHES "8")
				EXECUTE_PROCESS(COMMAND ${SCONS_BIN_PATH}/scons library=static snapshot=on mode=release verbose=on WORKING_DIRECTORY ../../3rdparty/v8)
			ENDIF(CMAKE_SIZEOF_VOID_P MATCHES "8")
		ENDIF(NOT EXISTS ../../3rdparty/v8/libv8.a AND NOT EXISTS ../../3rdparty/v8/libv8_g.a)
		IF (NOT EXISTS ../../3rdparty/v8/libv8.a AND NOT EXISTS ../../3rdparty/v8/libv8_g.a)
			MESSAGE(FATAL_ERROR "Unable to build v8 engine")
		ENDIF(NOT EXISTS ../../3rdparty/v8/libv8.a AND NOT EXISTS ../../3rdparty/v8/libv8_g.a)
		INCLUDE(cmake_find_modules/Find_v8.cmake)
	ENDIF(SCONS_FOUND)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Darwin" OR CMAKE_SYSTEM_NAME MATCHES "FreeBSD")


#debug/release
SET(GENERIC_FLAGS "${GENERIC_FLAGS} -Wall -Werror")
SET(CMAKE_CXX_FLAGS_DEBUG "-g -O0 ${GENERIC_FLAGS} -DWITH_SANITY_INPUT_BUFFER")
SET(CMAKE_CXX_FLAGS_RELEASE "-O2 -fno-strict-aliasing ${GENERIC_FLAGS}")
SET(CMAKE_BUILD_TYPE Debug)
#SET(CMAKE_BUILD_TYPE Release)
#SET(CMAKE_VERBOSE_MAKEFILE TRUE)

#generate defines.h
IF (EXISTS ../../sources/common/include/new/defines.h)
	MESSAGE(STATUS "Defines are in place")
ELSE (EXISTS ../../sources/common/include/new/defines.h)
	MESSAGE(STATUS "We need to rebuild the defines")
	EXECUTE_PROCESS(COMMAND lua ../../constants/constants.lua cpp ../../sources/common/include/new/defines.h)
ENDIF(EXISTS ../../sources/common/include/new/defines.h)


#ADD_DEFINITIONS(-DHAS_SAFE_LOGGER)
ADD_SUBDIRECTORY(lua lua)
ADD_SUBDIRECTORY(common common)
ADD_SUBDIRECTORY(thelib thelib)
ADD_SUBDIRECTORY(rtmpserver rtmpserver)
ADD_SUBDIRECTORY(applications applications)
#ADD_SUBDIRECTORY(androidapplestreaming androidapplestreaming)

ADD_DEFINITIONS(-DVM_LUA)
ADD_SUBDIRECTORY(vm vm)
ADD_SUBDIRECTORY(vmtests vmtests)
ADD_SUBDIRECTORY(tests)

