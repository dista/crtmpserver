#Copyright (c) 2009, Gavriloaie Eugen-Andrei (shiretu@gmail.com)
#All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#              *Redistributions of source code must retain the above copyright notice,
#               this list of conditions and the following disclaimer.
#              *Redistributions in binary form must reproduce the above copyright
#               notice, this list of conditions and the following disclaimer in the
#               documentation and/or other materials provided with the distribution.
#              *Neither the name of the DEVSS nor the names of its
#               contributors may be used to endorse or promote products derived from
#               this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


PROJECT_BASE = ../..
SOURCES_BASE = $(PROJECT_BASE)/sources
TOOLCHAIN_BASE = /home/shiretu/work/opt/toolchain
OUTPUT_BASE = ./output
OUTPUT_STATIC = $(OUTPUT_BASE)/static
OUTPUT_DYNAMIC = $(OUTPUT_BASE)/dynamic

$(shell rm -rf $(OUTPUT_BASE))

TOOLCHAIN_BASE = /home/shiretu/work/opt/toolchain
CC = $(TOOLCHAIN_BASE)/bin/arm-linux-uclibc-gcc
CXX = $(TOOLCHAIN_BASE)/bin/arm-linux-uclibc-g++
AR = $(TOOLCHAIN_BASE)/bin/arm-linux-uclibc-ar
STATIC_LIB_SUFIX = .a
STATIC_LIB_PREFIX = lib
DYNAMIC_LIB_SUFIX = .so
DYNAMIC_LIB_PREFIX = lib
PLATFORM_DEFINES = -DLINUX \
	-DLITTLE_ENDIAN_SHORT_ALIGNED \
	-DNET_EPOLL
SSL_INCLUDE = -I$(TOOLCHAIN_BASE)/include
SSL_LIB = -lssl 

CFLAGS = -Wall -Werror -O0 -g -fPIC
LFLAGS = -ldl $(SSL_LIB) $(LUA_LIB)

FEATURES_DEFINES = -DHAS_PROTOCOL_HTTP \
	-DHAS_PROTOCOL_RTMP \
	-DHAS_PROTOCOL_LIVEFLV \
	-DHAS_PROTOCOL_RTP \
	-DHAS_PROTOCOL_TS \
	-DHAS_PROTOCOL_VAR \
	-DHAS_LUA 

DEFINES = $(PLATFORM_DEFINES) $(FEATURES_DEFINES)

INCLUDES = \
	$(LUA_INCLUDE) \
	$(SSL_INCLUDE) \
	-I$(SOURCES_BASE)/common/include \
	-I$(SOURCES_BASE)/thelib/include \
	-I$(SOURCES_BASE)/rtmpserver/include \
	-I$(SOURCES_BASE)/tests/include \
	-I$(PROJECT_BASE)/3rdparty/lua-dev

#lua library
LUA_TARGET = lua
LUA_TARGET_STATIC = $(STATIC_LIB_PREFIX)$(LUA_TARGET)$(STATIC_LIB_SUFIX)
LUA_TARGET_DYNAMIC = $(DYNAMIC_LIB_PREFIX)$(LUA_TARGET)$(DYNAMIC_LIB_SUFIX)
LUA_SRCS = $(shell find $(PROJECT_BASE)/3rdparty/lua-dev/ -type f -name *.c)
LUA_OBJS = $(LUA_SRCS:.c=.o)
LUA_STATIC_FLAGS =
LUA_DYNAMIC_FLAGS = -Wl,-soname,./$(LUA_TARGET_DYNAMIC)

#common library
COMMON_TARGET = common
COMMON_TARGET_STATIC = $(STATIC_LIB_PREFIX)$(COMMON_TARGET)$(STATIC_LIB_SUFIX)
COMMON_TARGET_DYNAMIC = $(DYNAMIC_LIB_PREFIX)$(COMMON_TARGET)$(DYNAMIC_LIB_SUFIX)
COMMON_SRCS = $(shell find $(SOURCES_BASE)/$(COMMON_TARGET) -type f -name *.cpp)
COMMON_OBJS = $(COMMON_SRCS:.cpp=.o)
COMMON_STATIC_FLAGS = 
COMMON_DYNAMIC_FLAGS = -L$(OUTPUT_DYNAMIC) -llua -Wl,-soname,./$(COMMON_TARGET_DYNAMIC)

#thelib library
THELIB_TARGET = thelib
THELIB_TARGET_STATIC = $(STATIC_LIB_PREFIX)$(THELIB_TARGET)$(STATIC_LIB_SUFIX)
THELIB_TARGET_DYNAMIC = $(DYNAMIC_LIB_PREFIX)$(THELIB_TARGET)$(DYNAMIC_LIB_SUFIX)
THELIB_SRCS = $(shell find $(SOURCES_BASE)/$(THELIB_TARGET) -type f -name *.cpp)
THELIB_OBJS = $(THELIB_SRCS:.cpp=.o)
THELIB_STATIC_LFLAGS =
THELIB_DYNAMIC_LFLAGS = -L$(OUTPUT_DYNAMIC) -llua -lcommon -Wl,-soname,./$(THELIB_TARGET_DYNAMIC)

#proxypublish library
PROXYPUBLISH_TARGET = proxypublish
PROXYPUBLISH_TARGET_STATIC = $(STATIC_LIB_PREFIX)$(PROXYPUBLISH_TARGET)$(STATIC_LIB_SUFIX)
PROXYPUBLISH_TARGET_DYNAMIC = $(DYNAMIC_LIB_PREFIX)$(PROXYPUBLISH_TARGET)$(DYNAMIC_LIB_SUFIX)
PROXYPUBLISH_SRCS = $(shell find $(SOURCES_BASE)/applications/$(PROXYPUBLISH_TARGET) -type f -name *.cpp)
PROXYPUBLISH_OBJS = $(PROXYPUBLISH_SRCS:.cpp=.proxypublish.o)
PROXYPUBLISH_STATIC_LFLAGS =
#PROXYPUBLISH_DYNAMIC_LFLAGS = -L$(OUTPUT_DYNAMIC) -llua -lcommon -lthelib -Wl,-soname,./applications/$(PROXYPUBLISH_TARGET)/$(PROXYPUBLISH_TARGET_DYNAMIC)
PROXYPUBLISH_DYNAMIC_LFLAGS = -L$(OUTPUT_DYNAMIC) -llua -lcommon -lthelib -Wl,-soname,./$(PROXYPUBLISH_TARGET_DYNAMIC)

#appselector library
APPSELECTOR_TARGET = appselector
APPSELECTOR_TARGET_STATIC = $(STATIC_LIB_PREFIX)$(APPSELECTOR_TARGET)$(STATIC_LIB_SUFIX)
APPSELECTOR_TARGET_DYNAMIC = $(DYNAMIC_LIB_PREFIX)$(APPSELECTOR_TARGET)$(DYNAMIC_LIB_SUFIX)
APPSELECTOR_SRCS = $(shell find $(SOURCES_BASE)/applications/$(APPSELECTOR_TARGET) -type f -name *.cpp)
APPSELECTOR_OBJS = $(APPSELECTOR_SRCS:.cpp=.appselector.o)
APPSELECTOR_STATIC_LFLAGS =
#APPSELECTOR_DYNAMIC_LFLAGS = -L$(OUTPUT_DYNAMIC) -llua -lcommon -lthelib -Wl,-soname,./applications/$(APPSELECTOR_TARGET)/$(APPSELECTOR_TARGET_DYNAMIC)
APPSELECTOR_DYNAMIC_LFLAGS = -L$(OUTPUT_DYNAMIC) -llua -lcommon -lthelib -Wl,-soname,./$(APPSELECTOR_TARGET_DYNAMIC)

#flvplayback library
FLVPLAYBACK_TARGET = flvplayback
FLVPLAYBACK_TARGET_STATIC = $(STATIC_LIB_PREFIX)$(FLVPLAYBACK_TARGET)$(STATIC_LIB_SUFIX)
FLVPLAYBACK_TARGET_DYNAMIC = $(DYNAMIC_LIB_PREFIX)$(FLVPLAYBACK_TARGET)$(DYNAMIC_LIB_SUFIX)
FLVPLAYBACK_SRCS = $(shell find $(SOURCES_BASE)/applications/$(FLVPLAYBACK_TARGET) -type f -name *.cpp)
FLVPLAYBACK_OBJS = $(FLVPLAYBACK_SRCS:.cpp=.flvplayback.o)
FLVPLAYBACK_STATIC_LFLAGS =
#FLVPLAYBACK_DYNAMIC_LFLAGS = -L$(OUTPUT_DYNAMIC) -llua -lcommon -lthelib -Wl,-soname,./applications/$(FLVPLAYBACK_TARGET)/$(FLVPLAYBACK_TARGET_DYNAMIC)
FLVPLAYBACK_DYNAMIC_LFLAGS = -L$(OUTPUT_DYNAMIC) -llua -lcommon -lthelib -Wl,-soname,./$(FLVPLAYBACK_TARGET_DYNAMIC)


#rtmpserver executable
RTMPSERVER_TARGET = rtmpserver
RTMPSERVER_TARGET_STATIC = $(STATIC_LIB_PREFIX)$(RTMPSERVER_TARGET)$(STATIC_LIB_SUFIX)
RTMPSERVER_TARGET_DYNAMIC = $(DYNAMIC_LIB_PREFIX)$(RTMPSERVER_TARGET)$(DYNAMIC_LIB_SUFIX)
RTMPSERVER_SRCS = $(shell find $(SOURCES_BASE)/$(RTMPSERVER_TARGET) -type f -name *.cpp)
RTMPSERVER_OBJS = $(RTMPSERVER_SRCS:.cpp=.o)
RTMPSERVER_STATIC_LFLAGS = 
RTMPSERVER_DYNAMIC_LFLAGS = -L$(OUTPUT_DYNAMIC) -llua -lcommon -lthelib

#tests executable
TESTS_TARGET = tests
TESTS_TARGET_STATIC = $(STATIC_LIB_PREFIX)$(TESTS_TARGET)$(STATIC_LIB_SUFIX)
TESTS_TARGET_DYNAMIC = $(DYNAMIC_LIB_PREFIX)$(TESTS_TARGET)$(DYNAMIC_LIB_SUFIX)
TESTS_SRCS = $(shell find $(SOURCES_BASE)/$(TESTS_TARGET) -type f -name *.cpp)
TESTS_OBJS = $(TESTS_SRCS:.cpp=.o)
TESTS_STATIC_LFLAGS = 
TESTS_DYNAMIC_LFLAGS = -L$(OUTPUT_DYNAMIC) -llua -lcommon -lthelib



all: $(LUA_TARGET) $(COMMON_TARGET) $(THELIB_TARGET) $(PROXYPUBLISH_TARGET) $(APPSELECTOR_TARGET) $(FLVPLAYBACK_TARGET) $(RTMPSERVER_TARGET) $(TESTS_TARGET) pack
	@echo  DONE!!!

$(LUA_TARGET): $(LUA_OBJS)
	@echo ------ LUA ------
	mkdir -p $(OUTPUT_DYNAMIC)
	$(CC) -fPIC -shared $(LUA_OBJS) $(LFLAGS) $(LUA_DYNAMIC_FLAGS) -o $(OUTPUT_DYNAMIC)/$(LUA_TARGET_DYNAMIC)

$(COMMON_TARGET): $(LUA_TARGET) $(COMMON_OBJS)
	@echo ------ COMMON ------
	@mkdir -p $(OUTPUT_DYNAMIC)
	$(CXX) -fPIC -shared $(COMMON_OBJS) $(LFLAGS) $(COMMON_DYNAMIC_FLAGS) -o $(OUTPUT_DYNAMIC)/$(COMMON_TARGET_DYNAMIC)


$(THELIB_TARGET): $(COMMON_TARGET) $(THELIB_OBJS)
	@echo ------ THELIB ------
	@mkdir -p $(OUTPUT_DYNAMIC)
	$(CXX) -fPIC -shared $(THELIB_OBJS) $(LFLAGS) $(THELIB_DYNAMIC_LFLAGS) -o $(OUTPUT_DYNAMIC)/$(THELIB_TARGET_DYNAMIC)

$(PROXYPUBLISH_TARGET): $(COMMON_TARGET) $(THELIB_TARGET) $(PROXYPUBLISH_OBJS)
	@echo ------ PROXYPUBLISH ------
	@mkdir -p $(OUTPUT_DYNAMIC)/applications/$(PROXYPUBLISH_TARGET)/mediaFolder
	$(CXX) -fPIC -shared $(PROXYPUBLISH_OBJS) $(LFLAGS) $(PROXYPUBLISH_DYNAMIC_LFLAGS) -o $(OUTPUT_DYNAMIC)/applications/$(PROXYPUBLISH_TARGET)/$(PROXYPUBLISH_TARGET_DYNAMIC)

$(APPSELECTOR_TARGET): $(COMMON_TARGET) $(THELIB_TARGET) $(APPSELECTOR_OBJS)
	@echo ------ APPSELECTOR ------
	@mkdir -p $(OUTPUT_DYNAMIC)/applications/$(APPSELECTOR_TARGET)/mediaFolder
	$(CXX) -fPIC -shared $(APPSELECTOR_OBJS) $(LFLAGS) $(APPSELECTOR_DYNAMIC_LFLAGS) -o $(OUTPUT_DYNAMIC)/applications/$(APPSELECTOR_TARGET)/$(APPSELECTOR_TARGET_DYNAMIC)

$(FLVPLAYBACK_TARGET): $(COMMON_TARGET) $(THELIB_TARGET) $(FLVPLAYBACK_OBJS)
	@echo ------ FLVPLAYBACK ------
	@mkdir -p $(OUTPUT_DYNAMIC)/applications/$(FLVPLAYBACK_TARGET)/mediaFolder
	$(CXX) -fPIC -shared $(FLVPLAYBACK_OBJS) $(LFLAGS) $(FLVPLAYBACK_DYNAMIC_LFLAGS) -o $(OUTPUT_DYNAMIC)/applications/$(FLVPLAYBACK_TARGET)/$(FLVPLAYBACK_TARGET_DYNAMIC)

$(RTMPSERVER_TARGET): $(THELIB_TARGET) $(RTMPSERVER_OBJS)
	@echo ------ RTMPSERVER ------
	@mkdir -p $(OUTPUT_DYNAMIC)
	@mkdir -p $(OUTPUT_STATIC)
	$(CXX) $(RTMPSERVER_OBJS) $(LFLAGS) $(RTMPSERVER_DYNAMIC_LFLAGS) -o $(OUTPUT_DYNAMIC)/$(RTMPSERVER_TARGET)
	$(CXX) $(RTMPSERVER_OBJS) $(LFLAGS) $(LUA_OBJS) $(COMMON_OBJS) $(THELIB_OBJS) -o $(OUTPUT_STATIC)/$(RTMPSERVER_TARGET)

$(TESTS_TARGET): $(THELIB_TARGET) $(TESTS_OBJS)
	@echo ------ TESTS ------
	@mkdir -p $(OUTPUT_DYNAMIC)
	@mkdir -p $(OUTPUT_STATIC)
	$(CXX) $(TESTS_OBJS) $(LFLAGS) $(TESTS_DYNAMIC_LFLAGS) -o $(OUTPUT_DYNAMIC)/$(TESTS_TARGET)
	$(CXX) $(TESTS_OBJS) $(LFLAGS) $(LUA_OBJS) $(COMMON_OBJS) $(THELIB_OBJS) -o $(OUTPUT_STATIC)/$(TESTS_TARGET)

.cpp.o:
	$(CXX) $(CFLAGS) $(INCLUDES) $(DEFINES) -c $<  -o $@

%.proxypublish.o: %.cpp
	$(CXX) $(CFLAGS) $(INCLUDES) -I$(SOURCES_BASE)/applications/proxypublish/include $(DEFINES) -c $< -o $@

%.appselector.o: %.cpp
	$(CXX) $(CFLAGS) $(INCLUDES) -I$(SOURCES_BASE)/applications/appselector/include $(DEFINES) -c $<  -o $@

%.flvplayback.o: %.cpp
	$(CXX) $(CFLAGS) $(INCLUDES) -I$(SOURCES_BASE)/applications/flvplayback/include $(DEFINES) -c $<  -o $@

.c.o:
	$(CC) -I$(PROJECT_BASE)/3rdparty/lua-dev -O2 -Wall -DLUA_USE_LINUX -fPIC -c $<  -o $@

pack:
	cp ./rtmpserver.lua $(OUTPUT_DYNAMIC)
	cp ./rtmpserver.lua $(OUTPUT_STATIC)
	tar -pczf ./rtmpd-uclinux.tar.gz $(OUTPUT_BASE)
	tar -pczf ./rtmpd-uclinux-dynamic.tar.gz $(OUTPUT_DYNAMIC)
	tar -pczf ./rtmpd-uclinux-static.tar.gz $(OUTPUT_STATIC)

clean:
	$(RM) -rfv \
		$(LUA_OBJS) \
		$(COMMON_OBJS) \
		$(THELIB_OBJS) \
		$(PROXYPUBLISH_OBJS) \
		$(APPSELECTOR_OBJS) \
		$(RTMPSERVER_OBJS) \
		$(TESTS_OBJS) \
		$(OUTPUT_BASE) \
		*.tar.gz

